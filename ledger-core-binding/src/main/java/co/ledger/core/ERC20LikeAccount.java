// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from erc20.djinni

package co.ledger.core;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

/**ERC20-like accounts class */
public abstract class ERC20LikeAccount {
    public abstract ERC20Token getToken();

    public abstract String getAddress();

    public abstract BigInt getBalance();

    public abstract ArrayList<ERC20LikeOperation> getOperations();

    public abstract byte[] getTransferToAddressData(BigInt amount, String address);

    public abstract OperationQuery queryOperations();

    private static final class CppProxy extends ERC20LikeAccount
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public ERC20Token getToken()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getToken(this.nativeRef);
        }
        private native ERC20Token native_getToken(long _nativeRef);

        @Override
        public String getAddress()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAddress(this.nativeRef);
        }
        private native String native_getAddress(long _nativeRef);

        @Override
        public BigInt getBalance()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getBalance(this.nativeRef);
        }
        private native BigInt native_getBalance(long _nativeRef);

        @Override
        public ArrayList<ERC20LikeOperation> getOperations()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getOperations(this.nativeRef);
        }
        private native ArrayList<ERC20LikeOperation> native_getOperations(long _nativeRef);

        @Override
        public byte[] getTransferToAddressData(BigInt amount, String address)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTransferToAddressData(this.nativeRef, amount, address);
        }
        private native byte[] native_getTransferToAddressData(long _nativeRef, BigInt amount, String address);

        @Override
        public OperationQuery queryOperations()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_queryOperations(this.nativeRef);
        }
        private native OperationQuery native_queryOperations(long _nativeRef);
    }
}
